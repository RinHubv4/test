local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Load Rayfield UI library
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
    Name = "Pet & Seed Spawner",
    LoadingTitle = "Pet & Seed Spawner",
    LoadingSubtitle = "Made by whqtt",
    Theme = "Default"
})

-- Pet Spawner Tab
local PetTab = Window:CreateTab("Pet Spawner", 136232391555861)
PetTab:CreateSection("Pet Spawner")

local petName = ""
local petWeight = 1
local petAge = 1
local petQuantity = 0

PetTab:CreateInput({
    Name = "Pet Name",
    PlaceholderText = "Raccoon",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        petName = value
    end
})

PetTab:CreateInput({
    Name = "Pet Weight",
    PlaceholderText = "1",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        petWeight = tonumber(value) or 1
    end
})

PetTab:CreateInput({
    Name = "Pet Age",
    PlaceholderText = "1",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        petAge = tonumber(value) or 1
    end
})

PetTab:CreateButton({
    Name = "Spawn",
    Callback = function()
        if not petName or petName == "" then
            warn("[PetSpawner] Please enter a valid pet name")
            return
        end

        local success, petList = pcall(function()
            return require(ReplicatedStorage.Data.PetRegistry.PetList)
        end)

        if not success then
            warn("[PetSpawner] Failed to load PetList: "..tostring(petList))
            return
        end

        local petData = petList[petName]
        if not petData then
            warn("[PetSpawner] Pet not found: "..petName)
            return
        end

        local petModelsFolder = ReplicatedStorage:FindFirstChild("Pet_Models")
        if not petModelsFolder then
            warn("[PetSpawner] Pet_Models folder not found in ReplicatedStorage.")
            return
        end

        local petModel = petModelsFolder:FindFirstChild(petName)
        if not petModel then
            warn("[PetSpawner] Pet model not found: "..petName)
            return
        end

        -- Increment quantity for naming
        petQuantity = petQuantity + 1

        -- Create tool for the pet, like seed spawner
        local petTool = Instance.new("Tool")
        petTool.Name = petName .. " [X" .. petQuantity .. "]"
        petTool:SetAttribute("ItemType", "Holdable")
        petTool:SetAttribute("PetName", petName)
        petTool:SetAttribute("Weight", petWeight)
        petTool:SetAttribute("Age", petAge)
        petTool:SetAttribute("Quantity", petQuantity)

        -- Clone the pet model to be the Handle. 
        -- Important: Must name the cloned model or part "Handle" and it must be a single Part or Model with PrimaryPart set.
        -- If petModel is a Model with multiple parts, ensure PrimaryPart is set in Roblox Studio or clone only the PrimaryPart.

        local handleClone
        if petModel:IsA("Model") then
            if petModel.PrimaryPart then
                -- Clone only the PrimaryPart to use as the handle
                handleClone = petModel.PrimaryPart:Clone()
            else
                -- If no PrimaryPart, just clone the whole model but warn user - may cause tool issues
                warn("[PetSpawner] Pet model has no PrimaryPart set, cloning entire model as handle may cause issues")
                handleClone = petModel:Clone()
            end
        elseif petModel:IsA("BasePart") then
            handleClone = petModel:Clone()
        else
            warn("[PetSpawner] Pet model is neither Model nor Part - unsupported")
            return
        end

        if not handleClone then
            warn("[PetSpawner] Failed to clone pet model or PrimaryPart")
            return
        end

        handleClone.Name = "Handle"
        handleClone.Parent = petTool

        -- Optionally set CanCollide false on handle to avoid physics issues
        if handleClone:IsA("BasePart") then
            handleClone.CanCollide = false
        elseif handleClone:IsA("Model") then
            for _, part in ipairs(handleClone:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end

        -- Setup tool equipped event for grip positioning (optional)
        petTool.Equipped:Connect(function()
            local character = LocalPlayer.Character
            if character then
                local rightArm = character:FindFirstChild("Right Arm")
                if rightArm then
                    local rightGrip = rightArm:FindFirstChild("RightGrip") or rightArm:FindFirstChildWhichIsA("Motor6D")
                    if rightGrip then
                        rightGrip.C0 = CFrame.new(0, -1, 0, 1, 0, 0, 0, 0, 1, 0, -1, 0)
                        rightGrip.C1 = CFrame.new(0.2, -0.448717117, 0.231557086, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    end
                end
            end
        end)

        -- Parent tool to player's backpack to make it equipable
        petTool.Parent = LocalPlayer.Backpack
        print("[PetSpawner] Spawned pet tool: "..petTool.Name)
    end
})

-- Seed Spawner Tab (as before)
local SeedTab = Window:CreateTab("Seed Spawner", 111869302762063)
SeedTab:CreateSection("Seed Spawner")

local seedName = ""
local seedQuantity = 0

SeedTab:CreateInput({
    Name = "Seed Name",
    PlaceholderText = "Carrot",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        seedName = value
    end
})

SeedTab:CreateButton({
    Name = "Spawn",
    Callback = function()
        if not seedName or seedName == "" then
            warn("[SeedSpawner] Please enter a valid seed name")
            return
        end

        local seedData = require(ReplicatedStorage.Data.SeedData)[seedName]
        if not seedData then
            warn("[SeedSpawner] Seed not found: "..seedName)
            return
        end

        seedQuantity = seedQuantity + 1

        local tool = Instance.new("Tool")
        tool.Name = seedData.SeedName .. " [X" .. seedQuantity .. "]"
        tool:SetAttribute("ItemType", "Holdable")
        tool:SetAttribute("SeedName", seedName)
        tool:SetAttribute("Quantity", seedQuantity)

        local seedModel = ReplicatedStorage.Seed_Models:FindFirstChild(seedName)
        if seedModel then
            local handle = seedModel:Clone()
            handle.Name = "Handle"
            handle.Parent = tool

            -- Disable collisions on the handle to avoid physics glitches
            if handle:IsA("BasePart") then
                handle.CanCollide = false
            elseif handle:IsA("Model") then
                for _, part in ipairs(handle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        else
            warn("[SeedSpawner] Seed model not found: "..seedName)
            return
        end

        tool.Equipped:Connect(function()
            local character = LocalPlayer.Character
            if character then
                local rightArm = character:FindFirstChild("Right Arm")
                if rightArm then
                    local rightGrip = rightArm:FindFirstChild("RightGrip") or rightArm:FindFirstChildWhichIsA("Motor6D")
                    if rightGrip then
                        rightGrip.C0 = CFrame.new(0, -1, 0, 1, 0, 0, 0, 0, 1, 0, -1, 0)
                        rightGrip.C1 = CFrame.new(0.2, -0.448717117, 0.231557086, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    end
                end
            end
        end)

        tool.Parent = LocalPlayer.Backpack
        print("[SeedSpawner] Spawned seed tool: "..tool.Name)
    end
})
