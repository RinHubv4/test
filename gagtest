local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Load Rayfield UI library
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
    Name = "Pet & Seed Spawner",
    LoadingTitle = "Pet & Seed Spawner",
    LoadingSubtitle = "Made by whqtt",
    Theme = "Default"
})

-- Pet Spawner Tab
local PetTab = Window:CreateTab("Pet Spawner", 136232391555861)
PetTab:CreateSection("Pet Spawner")

local petName = "Raccoon"
local petWeight = 1
local petAge = 1

PetTab:CreateInput({
    Name = "Pet Name",
    PlaceholderText = "Raccoon",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        petName = value
    end
})

PetTab:CreateInput({
    Name = "Pet Weight",
    PlaceholderText = "1",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        petWeight = tonumber(value) or 1
    end
})

PetTab:CreateInput({
    Name = "Pet Age",
    PlaceholderText = "1",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        petAge = tonumber(value) or 1
    end
})

PetTab:CreateButton({
    Name = "Spawn",
    Callback = function()
        -- Load pet list safely
        local success, petList = pcall(function()
            return require(ReplicatedStorage.Data.PetRegistry.PetList)
        end)

        if not success then
            warn("Failed to load PetList: " .. tostring(petList))
            return
        end

        if petName == "" then
            warn("Pet name is empty.")
            return
        end

        local petData = petList[petName]
        if not petData then
            warn("Pet not found: " .. petName)
            return
        end

        -- Find pet model from ReplicatedStorage (assuming similar path 'Pet_Models')
        local petModelTemplate = ReplicatedStorage.Pet_Models:FindFirstChild(petName)
        if not petModelTemplate then
            warn("Pet model not found in ReplicatedStorage.Pet_Models: " .. petName)
            return
        end

        -- Clone pet model
        local petInstance = petModelTemplate:Clone()
        petInstance.Name = petName .. "_Spawned"

        -- Set pet attributes if possible
        if petInstance:SetAttribute then
            petInstance:SetAttribute("Weight", petWeight)
            petInstance:SetAttribute("Age", petAge)
        end

        -- Parent pet to workspace under the player's character or a dedicated folder
        local character = LocalPlayer.Character
        if character then
            petInstance.Parent = workspace
            petInstance:SetPrimaryPartCFrame(character.HumanoidRootPart.CFrame * CFrame.new(2, 0, 2))
        else
            petInstance.Parent = workspace
        end

        print("Spawned pet: " .. petName .. " with Weight: " .. petWeight .. " and Age: " .. petAge)
    end
})

-- Seed Spawner Tab (unchanged for brevity)
local SeedTab = Window:CreateTab("Seed Spawner", 111869302762063)
SeedTab:CreateSection("Seed Spawner")

local seedName = ""

SeedTab:CreateInput({
    Name = "Seed Name",
    PlaceholderText = "Carrot",
    CurrentValue = "",
    RemoveTextAfterFocusLost = false,
    Callback = function(value)
        seedName = value
    end
})

SeedTab:CreateButton({
    Name = "Spawn",
    Callback = function()
        if not seedName or seedName == "" then
            warn("Please enter a valid seed name")
            return
        end

        local seedData = require(ReplicatedStorage.Data.SeedData)[seedName]
        if not seedData then
            warn("Seed not found: " .. seedName)
            return
        end

        local tool = Instance.new("Tool")
        tool.Name = seedData.SeedName .. " [X" .. (tool:GetAttribute("Quantity") or 0) + 1 .. "]"
        tool:SetAttribute("ItemType", "Holdable")
        tool:SetAttribute("SeedName", seedName)
        tool:SetAttribute("Quantity", (tool:GetAttribute("Quantity") or 0) + 1)

        local seedModel = ReplicatedStorage.Seed_Models:FindFirstChild(seedName)
        if seedModel then
            local handle = seedModel:Clone()
            handle.Name = "Handle"
            handle.Parent = tool
        else
            warn("Seed model not found: " .. seedName)
            return
        end

        tool.Equipped:Connect(function()
            local character = LocalPlayer.Character
            if character then
                local rightArm = character:WaitForChild("Right Arm")
                local rightGrip = rightArm:WaitForChild("RightGrip")
                rightGrip.C0 = CFrame.new(0, -1, 0, 1, 0, 0, 0, 0, 1, 0, -1, 0)
                rightGrip.C1 = CFrame.new(0.2, -0.448717117, 0.231557086, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            end
        end)

        tool.Parent = LocalPlayer.Backpack
        print("Spawned seed: " .. seedName)
    end
})
